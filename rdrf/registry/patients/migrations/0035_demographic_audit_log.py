# Generated by Django 2.1.5 on 2019-03-28 07:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ('rdrf', '0095_auto_20190206_1030'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('patients', '0034_auto_20181220_1457'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalAddressType',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('type', models.CharField(db_index=True, max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical address type',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalClinicianOther',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('use_other', models.BooleanField(default=False)),
                ('clinician_name', models.CharField(blank=True, max_length=200, null=True)),
                ('clinician_hospital', models.CharField(blank=True, max_length=200, null=True)),
                ('clinician_address', models.CharField(blank=True, max_length=200, null=True)),
                ('clinician_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('clinician_phone_number', models.CharField(blank=True, max_length=254, null=True)),
                ('clinician_first_name', models.CharField(blank=True, max_length=200, null=True)),
                ('clinician_last_name', models.CharField(blank=True, max_length=200, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
                ('speciality', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Speciality')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical clinician other',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalConsentValue',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('answer', models.BooleanField(default=False)),
                ('first_save', models.DateField(blank=True, null=True)),
                ('last_update', models.DateField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('consent_question', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rdrf.ConsentQuestion')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
            ],
            options={
                'verbose_name': 'historical consent value',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDoctor',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=4, null=True)),
                ('family_name', models.CharField(db_index=True, max_length=100, verbose_name='Family/Last name')),
                ('given_names', models.CharField(db_index=True, max_length=100, verbose_name='Given/First names')),
                ('sex', models.CharField(blank=True, choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1, null=True)),
                ('surgery_name', models.CharField(blank=True, max_length=100)),
                ('speciality', models.CharField(max_length=100)),
                ('address', models.TextField()),
                ('suburb', models.CharField(max_length=50, verbose_name='Suburb/Town/City')),
                ('postcode', models.CharField(blank=True, max_length=20, null=True)),
                ('phone', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('fax', models.CharField(blank=True, max_length=30, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('state', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.State', verbose_name='State/Province/Territory')),
            ],
            options={
                'verbose_name': 'historical doctor',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalNextOfKinRelationship',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('relationship', models.CharField(max_length=100, verbose_name='Relationship')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Next of Kin Relationship',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalParentGuardian',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=50)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('place_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Place of birth')),
                ('date_of_migration', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1)),
                ('address', models.TextField()),
                ('suburb', models.CharField(max_length=50, verbose_name='Suburb/Town')),
                ('state', models.CharField(max_length=20, verbose_name='State/Province/Territory')),
                ('postcode', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('self_patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical parent guardian',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatient',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('consent', models.BooleanField(help_text='The patient consents to be part of the registry and have data retained and shared in accordance with the information provided to them.', verbose_name='consent given')),
                ('consent_clinical_trials', models.BooleanField(default=False, help_text='Consent given to be contacted about clinical trials or other studies related to their condition.')),
                ('consent_sent_information', models.BooleanField(default=False, help_text='Consent given to be sent information on their condition', verbose_name='consent to be sent information given')),
                ('consent_provided_by_parent_guardian', models.BooleanField(default=False, help_text='Parent/Guardian consent provided on behalf of the patient.')),
                ('family_name', models.CharField(db_index=True, max_length=100, verbose_name='Family Name')),
                ('given_names', models.CharField(db_index=True, max_length=100, verbose_name='Given Names')),
                ('maiden_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Maiden name (if applicable)')),
                ('umrn', models.CharField(blank=True, db_index=True, max_length=50, null=True, verbose_name='Hospital/Clinic ID')),
                ('date_of_birth', models.DateField(verbose_name='Date of birth')),
                ('date_of_death', models.DateField(blank=True, null=True, verbose_name='Date of death')),
                ('place_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Place of birth')),
                ('date_of_migration', models.DateField(blank=True, null=True, verbose_name='Date of migration')),
                ('country_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country of birth')),
                ('ethnic_origin', models.CharField(blank=True, choices=[('New Zealand European', 'New Zealand European'), ('Australian', 'Australian'), ('Other Caucasian/European', 'Other Caucasian/European'), ('Aboriginal', 'Aboriginal'), ('Person from the Torres Strait Islands', 'Person from the Torres Strait Islands'), ('Maori', 'Maori'), ('NZ European / Maori', 'NZ European / Maori'), ('Samoan', 'Samoan'), ('Cook Islands Maori', 'Cook Islands Maori'), ('Tongan', 'Tongan'), ('Niuean', 'Niuean'), ('Tokelauan', 'Tokelauan'), ('Fijian', 'Fijian'), ('Other Pacific Peoples', 'Other Pacific Peoples'), ('Southeast Asian', 'Southeast Asian'), ('Chinese', 'Chinese'), ('Indian', 'Indian'), ('Other Asian', 'Other Asian'), ('Middle Eastern', 'Middle Eastern'), ('Latin American', 'Latin American'), ('Black African/African American', 'Black African/African American'), ('Other Ethnicity', 'Other Ethnicity'), ('Decline to Answer', 'Decline to Answer')], max_length=100, null=True, verbose_name='Ethnic origin')),
                ('sex', models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1, verbose_name='Sex')),
                ('home_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Home phone')),
                ('mobile_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Mobile phone')),
                ('work_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Work phone')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('next_of_kin_family_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Family name')),
                ('next_of_kin_given_names', models.CharField(blank=True, max_length=100, null=True, verbose_name='Given names')),
                ('next_of_kin_address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('next_of_kin_suburb', models.CharField(blank=True, max_length=50, null=True, verbose_name='Suburb/Town')),
                ('next_of_kin_state', models.CharField(blank=True, max_length=20, null=True, verbose_name='State/Province/Territory')),
                ('next_of_kin_postcode', models.IntegerField(blank=True, null=True, verbose_name='Postcode')),
                ('next_of_kin_home_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Home phone')),
                ('next_of_kin_mobile_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Mobile phone')),
                ('next_of_kin_work_phone', models.CharField(blank=True, max_length=30, null=True, verbose_name='Work phone')),
                ('next_of_kin_email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('next_of_kin_parent_place_of_birth', models.CharField(blank=True, max_length=100, null=True, verbose_name='Place of birth of parents')),
                ('next_of_kin_country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('active', models.BooleanField(default=True, help_text='Ticked if active in the registry, ie not a deleted record, or deceased patient.')),
                ('inactive_reason', models.TextField(blank=True, help_text='Please provide reason for deactivating the patient', null=True, verbose_name='Reason')),
                ('living_status', models.CharField(choices=[('Alive', 'Living'), ('Deceased', 'Deceased')], default='Alive', max_length=80, verbose_name='Living status')),
                ('patient_type', models.CharField(blank=True, max_length=80, null=True, verbose_name='Patient Type')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('clinician', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Clinician')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('next_of_kin_relationship', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.NextOfKinRelationship', verbose_name='Relationship')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical patient',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatientAddress',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('address', models.TextField()),
                ('suburb', models.CharField(max_length=100, verbose_name='Suburb/Town')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('state', models.CharField(max_length=50, verbose_name='State')),
                ('postcode', models.CharField(max_length=50, verbose_name='Postcode')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('address_type', models.ForeignKey(blank=True, db_constraint=False, default=1, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.AddressType', verbose_name='Address type')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
            ],
            options={
                'verbose_name': 'historical patient address',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatientConsent',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('form', models.TextField(blank=True, max_length=100, null=True, verbose_name='Consent form')),
                ('filename', models.CharField(max_length=255)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
            ],
            options={
                'verbose_name': 'historical patient consent',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatientDoctor',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('relationship', models.CharField(max_length=50)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('doctor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Doctor')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
            ],
            options={
                'verbose_name': 'historical medical professionals for patient',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatientRelative',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('family_name', models.CharField(max_length=100)),
                ('given_names', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('sex', models.CharField(choices=[('1', 'Male'), ('2', 'Female'), ('3', 'Indeterminate')], max_length=1)),
                ('relationship', models.CharField(choices=[('Parent (1st degree)', 'Parent (1st degree)'), ('Child (1st degree)', 'Child (1st degree)'), ('Sibling (1st degree)', 'Sibling (1st degree)'), ('Identical Twin (0th degree)', 'Identical Twin (0th degree)'), ('Non-identical Twin (1st degree)', 'Non-identical Twin (1st degree)'), ('Half Sibling (1st degree)', 'Half Sibling (1st degree)'), ('Grandparent (2nd degree)', 'Grandparent (2nd degree)'), ('Grandchild (2nd degree)', 'Grandchild (2nd degree)'), ('Uncle/Aunt (2nd degree)', 'Uncle/Aunt (2nd degree)'), ('Niece/Nephew (2nd degree)', 'Niece/Nephew (2nd degree)'), ('1st Cousin (3rd degree)', '1st Cousin (3rd degree)'), ('Great Grandparent (3rd degree)', 'Great Grandparent (3rd degree)'), ('Great Grandchild (3rd degree)', 'Great Grandchild (3rd degree)'), ('Great Uncle/Aunt (3rd degree)', 'Great Uncle/Aunt (3rd degree)'), ('Grand Niece/Nephew (3rd degree)', 'Grand Niece/Nephew (3rd degree)'), ('1st Cousin once removed (4th degree)', '1st Cousin once removed (4th degree)'), ('Spouse', 'Spouse'), ('Unknown', 'Unknown'), ('Other', 'Other')], max_length=80)),
                ('location', models.CharField(choices=[('AU - WA', 'Australia - WA'), ('AU - SA', 'Australia - SA'), ('AU - NSW', 'Australia - NSW'), ('AU - QLD', 'Australia - QLD'), ('AU - NT', 'Australia - NT'), ('AU - VIC', 'Australia - VIC'), ('AU - TAS', 'Australia - TAS'), ('NZ', 'New Zealand'), ('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia, Plurinational State of'), ('BQ', 'Bonaire, Sint Eustatius and Saba'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei Darussalam'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('CV', 'Cabo Verde'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CD', 'Congo, The Democratic Republic of the'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CW', 'Curaçao'), ('CY', 'Cyprus'), ('CZ', 'Czechia'), ('CI', "Côte d'Ivoire"), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands (Malvinas)'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran, Islamic Republic of'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KP', "Korea, Democratic People's Republic of"), ('KR', 'Korea, Republic of'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', "Lao People's Democratic Republic"), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'Macedonia, Republic of'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova, Republic of'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine, State of'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena, Ascension and Tristan da Cunha'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin (French part)'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SX', 'Sint Maarten (Dutch part)'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syrian Arab Republic'), ('TW', 'Taiwan, Province of China'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania, United Republic of'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela, Bolivarian Republic of'), ('VN', 'Viet Nam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'), ('AX', 'Åland Islands')], max_length=80)),
                ('living_status', models.CharField(choices=[('Alive', 'Living'), ('Deceased', 'Deceased')], max_length=80)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient')),
                ('relative_patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='patients.Patient', verbose_name='Create Patient?')),
            ],
            options={
                'verbose_name': 'historical patient relative',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSpeciality',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('registry', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rdrf.Registry')),
            ],
            options={
                'verbose_name': 'historical speciality',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalState',
            fields=[
                ('short_name', models.CharField(db_index=True, max_length=3)),
                ('name', models.CharField(max_length=30)),
                ('country_code', models.CharField(blank=True, max_length=30, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical state',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
